package com.newnetcom.anlyze;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
//import java.util.Timer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
//import com.newnetcom.anlyze.thread.UpdateHbaseMyTask;
//import com.newnetcom.anlyze.thread.UpdateRedisTask;
//import com.newnetcom.anlyze.utils.ByteUtils;
//import com.newnetcom.anlyze.anlyze.AnlyzeCans;
import com.newnetcom.anlyze.anlyze.AnlyzeMain;
import com.newnetcom.anlyze.anlyze.db.factory.DatabaseFactory;
import com.newnetcom.anlyze.beans.ProtocolBean;
import com.newnetcom.anlyze.beans.VehicleIndex;
import com.newnetcom.anlyze.config.PropertyResource;

import cn.ngsoc.hbase.util.pages.Esutil;
//import com.newnetcom.anlyze.thread.AnlyzeDataTask;
//import com.newnetcom.anlyze.thread.CheckCatchTask;
//import com.newnetcom.anlyze.thread.DataToKafKaTask;
//import com.newnetcom.anlyze.thread.MyTask;
//import com.newnetcom.anlyze.thread.RawDataMyTaskRun;

public class TestApp {
	// private static final Logger logger =
	// LoggerFactory.getLogger(TestApp.class);

	public static void main(String[] args) {
		// ByteUtils.toEscape(ByteUtils.hexStr2Bytes("7E00000000E802C001FE4342313039363902010000262D000028F03B07B2B43C0228002D004D01110B0E022F3400C01C00007B21FF18007E"));
		// logger.error("tet");
		// TODO Auto-generated method stub
		// UpdateHbaseMyTask sendData = new UpdateHbaseMyTask();
		// sendData.setDaemon(true);
		// sendData.start();
		// AnlyzeDataTask sendData1 = new AnlyzeDataTask();
		// sendData1.setDaemon(true);
		// sendData1.start();
		// UpdateRedisTask sendDataRedis = new UpdateRedisTask();
		// sendDataRedis.setDaemon(true);
		// sendDataRedis.start();
		//
		// RawDataMyTaskRun sendData2 = new RawDataMyTaskRun();
		// sendData2.setDaemon(true);
		// sendData2.start();
		//
		// DataToKafKaTask sendDataTask = new DataToKafKaTask();
		// sendDataTask.setDaemon(true);
		// sendDataTask.start();
		//
//		// Timer timer = new Timer();
		Map<String,String> config=	PropertyResource.getInstance().getProperties();
		DatabaseFactory.getDB(Integer.parseInt(config.get("databaseType")),"A2L");//1获取配置文件的分析类
		DatabaseFactory.getDB(Integer.parseInt(config.get("databaseType")),"CAN");
	long temp=System.currentTimeMillis();
	 ExecutorService executor = Executors.newFixedThreadPool(10);
//		// timer.schedule(new CheckCatchTask(), new Date(), 10000);
	for (int t=0;t<1;t++)
		{
//		
		ProtocolBean protocol = new ProtocolBean();
		protocol.setFIBER_UNID("27A67D545CFF4AE3AD4DF45AB94A7C18");
		//098E11E36A024692A257DB72306137FF
		protocol.setRAW_OCTETS(
				
				
				);
		protocol.setProto_unid("CD039E17A8E84137AF6DE1CDC172C274");
		//AF27DA9036174426A2E2F7C19A9A959C
		//CD039E17A8E84137AF6DE1CDC172C274
		protocol.setUnid("276D8F32B73946BFA2D3CBEAC0C65EC0");
		protocol.setTIMESTAMP(String.valueOf(new Date().getTime()));
		
		//executor.
		new AnlyzeMain(protocol).run();
		
		//executor.execute(new AnlyzeMain(protocol));
	}
		System.out.println(System.currentTimeMillis()-temp);
		
		
//		List<VehicleIndex> vehicleIndexs=new ArrayList<>();
//		VehicleIndex temp=new VehicleIndex("ee",String.valueOf(new Date().getTime()));
//		vehicleIndexs.add(temp);
//		Esutil.addIndex("tst", "type", vehicleIndexs);

	}
}
