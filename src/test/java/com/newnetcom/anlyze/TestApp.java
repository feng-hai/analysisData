package com.newnetcom.anlyze;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
//import java.util.Timer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
//import com.newnetcom.anlyze.thread.UpdateHbaseMyTask;
//import com.newnetcom.anlyze.thread.UpdateRedisTask;
//import com.newnetcom.anlyze.utils.ByteUtils;
//import com.newnetcom.anlyze.anlyze.AnlyzeCans;
import com.newnetcom.anlyze.anlyze.AnlyzeMain;
import com.newnetcom.anlyze.anlyze.db.factory.DatabaseFactory;
import com.newnetcom.anlyze.beans.ProtocolBean;
import com.newnetcom.anlyze.beans.VehicleIndex;
import com.newnetcom.anlyze.config.PropertyResource;

import cn.ngsoc.hbase.util.pages.Esutil;
//import com.newnetcom.anlyze.thread.AnlyzeDataTask;
//import com.newnetcom.anlyze.thread.CheckCatchTask;
//import com.newnetcom.anlyze.thread.DataToKafKaTask;
//import com.newnetcom.anlyze.thread.MyTask;
//import com.newnetcom.anlyze.thread.RawDataMyTaskRun;

public class TestApp {
	// private static final Logger logger =
	// LoggerFactory.getLogger(TestApp.class);

	public static void main(String[] args) {
		// ByteUtils.toEscape(ByteUtils.hexStr2Bytes("7E00000000E802C001FE4342313039363902010000262D000028F03B07B2B43C0228002D004D01110B0E022F3400C01C00007B21FF18007E"));
		// logger.error("tet");
		// TODO Auto-generated method stub
		// UpdateHbaseMyTask sendData = new UpdateHbaseMyTask();
		// sendData.setDaemon(true);
		// sendData.start();
		// AnlyzeDataTask sendData1 = new AnlyzeDataTask();
		// sendData1.setDaemon(true);
		// sendData1.start();
		// UpdateRedisTask sendDataRedis = new UpdateRedisTask();
		// sendDataRedis.setDaemon(true);
		// sendDataRedis.start();
		//
		// RawDataMyTaskRun sendData2 = new RawDataMyTaskRun();
		// sendData2.setDaemon(true);
		// sendData2.start();
		//
		// DataToKafKaTask sendDataTask = new DataToKafKaTask();
		// sendDataTask.setDaemon(true);
		// sendDataTask.start();
		//
//		// Timer timer = new Timer();
		Map<String,String> config=	PropertyResource.getInstance().getProperties();
		DatabaseFactory.getDB(Integer.parseInt(config.get("databaseType")),"A2L");//1获取配置文件的分析类
		DatabaseFactory.getDB(Integer.parseInt(config.get("databaseType")),"CAN");
	long temp=System.currentTimeMillis();
	 ExecutorService executor = Executors.newFixedThreadPool(10);
//		// timer.schedule(new CheckCatchTask(), new Date(), 10000);
	for (int t=0;t<100000;t++)
		{
//		
		ProtocolBean protocol = new ProtocolBean();
		protocol.setFIBER_UNID("27A67D545CFF4AE3AD4DF45AB94A7C18");
		//098E11E36A024692A257DB72306137FF
		protocol.setRAW_OCTETS(
				//"7E0705031F01529554513204A500420857350000504C19BE0B0D0E0D00000E0D504C19BF0C0D0F0D0B0D0E0D504C19C00C0D0B0D0E0D0B0D504C19C10B0D0E0D0E0D00004CFE52633000004000FFC0004CFE5262100000A000FFC000504C19D6100D110D110D110D504C19D7110D100D0F0D0F0D504C19D8100D100D100D100D504C19D90000110D100D100D504C19DA110D120D110D110D504C19DB110D130D100D130D504C19DC110D000000000000504C1A2A120D0F0D130D0F0D504C1A2B0F0D100D0000100D504C1A2C100D0F0D100D100D504C1A2D0F0D100D0F0D110D504C1A2E0F0D0F0D100D000058FF217B11F4151027644C1858FF227B000000000000000058FF247B5A014D014E01791D58FF257B4340421C0100000058FF297B0008520852010000504C1A43150D160D140D130D58FFA97B0000000000000000504C1A44120D140D120D140D504C1A45140D150D140D170D504C1A460000140D160D170D504C1A47130D160D120D160D504C1A48150D160D140D170D504C1A49120D000000000000504C1A5C0E0D0E0D0D0D120D504C1A5D0E0D100D00000E0D504C1A5E0E0D0E0D0E0D100D504C1A5F0D0D8D0D0E0D0D0D504C1A600C0D0F0D0F0D0000504C1A75130D150D150D120D504C1A76130D120D140D110D504C1A77130D100D130D130D504C1A780000120D120D130D504C1A79140D150D130D110D504C1A7A140D120D140D180D504C1A7B150D000000000000504C1A82120D120D110D120D504C1A83110D120D0000110D504C1A84120D100D0F0D110D504C1A85110D110D110D120D504C1A86100D120D100D000053CC16B24C18000000A80000504C1991320210276400420E504C1992740EB80BF00A0000504C19935F00AC0DAC0D8101504C1997FF00000000000000504C19981913191319131913504C1A083800390038003900504C1A093800390038003900504C1A183600370036003800504C1A193600370036003800504C19A40E0D120D120D110D504C19A5100D0F0D0E0D100D504C19A60D0D100D0E0D0F0D504C19A70000100D0F0D0E0D504C19A8100D0E0D0E0D100D504C19A90E0D110D0F0D100D504C19AA0F0D000000000000504C19BD0C0D100D0E0D0E0D697E"
				
				);
		protocol.setProto_unid("CD039E17A8E84137AF6DE1CDC172C274");
		//AF27DA9036174426A2E2F7C19A9A959C
		//CD039E17A8E84137AF6DE1CDC172C274
		protocol.setUnid("276D8F32B73946BFA2D3CBEAC0C65EC0");
		protocol.setTIMESTAMP(String.valueOf(new Date().getTime()));
		
		//executor.
		new AnlyzeMain(protocol).run();
		
		//executor.execute(new AnlyzeMain(protocol));
	}
		System.out.println(System.currentTimeMillis()-temp);
		
		
//		List<VehicleIndex> vehicleIndexs=new ArrayList<>();
//		VehicleIndex temp=new VehicleIndex("ee",String.valueOf(new Date().getTime()));
//		vehicleIndexs.add(temp);
//		Esutil.addIndex("tst", "type", vehicleIndexs);

	}
}
